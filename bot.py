import asyncio
import json
import logging
import os
from collections import defaultdict
from typing import Dict, Any, Optional
from datetime import datetime, time

import aiofiles
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest # –î–æ–¥–∞–Ω–æ TelegramBadRequest –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import config
from color_data import (
    color_dict, evaluation_criteria, color_to_system, evaluation_icons, MENUS
)

API_TOKEN: str = config.API_TOKEN
CHANNEL_ID: int = config.CHANNEL_ID
DATA_FILE: str = "data.json"
MENU_TIME = time(8, 0)
WEIGHT_TIME = time(20, 0)
TOTAL_WEIGHT_TRACKING_DAYS = 7

WEIGHT_TRACKING_INSTRUCTIONS = (
    "üìã –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–ø—É—â–µ–Ω–æ!\n\n"
    f"–Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –≤–∞–º –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —â–æ—Ä–∞–Ω–∫—É –æ {MENU_TIME.strftime('%H:%M')} "
    f"—Ç–∞ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏–º—É –≤–∞—à—É –≤–∞–≥—É —â–æ–≤–µ—á–æ—Ä–∞ –æ {WEIGHT_TIME.strftime('%H:%M')} "
    f"–ø—Ä–æ—Ç—è–≥–æ–º {TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤."
)
WEIGHT_QUESTION = "‚öñÔ∏è –Ø–∫–∞ —É –≤–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∞–≥–∞? –ù–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 75.5 –∞–±–æ 75,5)."
WEIGHT_REMINDER = "‚è∞ –ù–∞–≥–∞–¥—É—é, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –≤–∞–≥—É."

WELCOME_IMAGE_PATH = "img/1.png"
RESULTS_IMAGE_PATH = "img/1.png"

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()
router: Router = Router()
data_lock = asyncio.Lock()

user_test_scores: Dict[int, Dict[str, int]] = defaultdict(lambda: {color: 0 for color in list(color_dict.values())[0]})
user_test_progress: Dict[int, int] = defaultdict(int)
user_weight_data: Dict[int, Dict[str, Any]] = defaultdict(dict)
user_last_question_msg_id: Dict[int, int] = defaultdict(int)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

async def load_user_data() -> None:
    global user_test_scores, user_test_progress, user_weight_data
    async with data_lock:
        if os.path.exists(DATA_FILE):
            try:
                async with aiofiles.open(DATA_FILE, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    if not content:
                        logging.info(f"–§–∞–π–ª –¥–∞–Ω–∏—Ö {DATA_FILE} –ø–æ—Ä–æ–∂–Ω—ñ–π. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...")
                        return
                    all_data = json.loads(content)
                # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–µ—Å—Ç—É
                scores_from_file = all_data.get('test_scores', {})
                progress_from_file = all_data.get('test_progress', {})
                # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–∞–≥–∏/–º–µ–Ω—é
                weight_data_from_file = all_data.get('weight_tracker', {})
                # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ user_id –∑ —Ä—è–¥–∫—ñ–≤ (JSON) –Ω–∞ int
                user_test_scores.update({int(k): v for k, v in scores_from_file.items()})
                user_test_progress.update({int(k): v for k, v in progress_from_file.items()})
                user_weight_data.update({int(k): v for k, v in weight_data_from_file.items()})
                logging.info(f"–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ {DATA_FILE}")
            except json.JSONDecodeError:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON –∑ —Ñ–∞–π–ª—É {DATA_FILE}. –§–∞–π–ª –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ.")
            except Exception as e:
                logging.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ {DATA_FILE}: {e}")
        else:
            logging.info(f"–§–∞–π–ª –¥–∞–Ω–∏—Ö {DATA_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.")

async def save_user_data() -> None:
    async with data_lock:
        try:
            data_to_save = {
                'test_scores': {str(k): v for k, v in user_test_scores.items()},
                'test_progress': {str(k): v for k, v in user_test_progress.items()},
                'weight_tracker': {str(k): v for k, v in user_weight_data.items()}
            }
            async with aiofiles.open(DATA_FILE, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(data_to_save, ensure_ascii=False, indent=4))
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É {DATA_FILE}: {e}")

async def send_safe_message(user_id: int, text: str, **kwargs):
    try:
        await bot.send_message(user_id, text, **kwargs)
    except TelegramAPIError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def is_user_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
    except TelegramAPIError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤ –∫–∞–Ω–∞–ª—ñ {CHANNEL_ID}: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        return False


def create_buttons(buttons: list[tuple[str, str]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=text, callback_data=callback)] for text, callback in buttons]
    )

def get_answer_buttons(qid: int) -> InlineKeyboardMarkup:
    return create_buttons([
        ("‚úÖ –¢–∞–∫", f"yes_{qid}"),
        ("‚ùå –ù—ñ", f"no_{qid}"),
        ("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", f"skip_{qid}")
    ])

def get_subscribe_button() -> InlineKeyboardMarkup:
    channel_link = getattr(config, 'CHANNEL_LINK', "https://t.me/your_channel_username")
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=channel_link)],
            [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )

def get_restart_buttons() -> InlineKeyboardMarkup:
    return create_buttons([
        ("üîÑ –¢–∞–∫, –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", "restart_test"),
        ("‚ùå –ù—ñ", "cancel_restart")
    ])

def get_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚öôÔ∏è –û–ø—Ü—ñ—è 1 (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", callback_data="dev_1"),
                InlineKeyboardButton(text="üîß –û–ø—Ü—ñ—è 2 (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", callback_data="dev_2")
            ],
            [
                InlineKeyboardButton(text="üìú –û–ø—Ü—ñ—è 3 (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", callback_data="dev_3"),
                InlineKeyboardButton(text="üìñ –ú–µ–Ω—é", callback_data="start_weight_tracking")
            ],
            [
                InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")
            ]
        ]
    )
@router.message(CommandStart())
async def send_welcome(message: types.Message) -> None:
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({message.from_user.full_name}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.")
    # –°–∫–∏–¥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∏–Ω–∞—î –∑ /start
    user_last_question_msg_id[user_id] = 0
    caption = f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    try:
        photo = FSInputFile(WELCOME_IMAGE_PATH)
        await message.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ ({WELCOME_IMAGE_PATH}): {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        await message.answer(
            caption,
            reply_markup=get_main_menu()
        )
class UserData(StatesGroup):
    full_name = State()
    age = State()
    height_weight = State()
    diagnoses = State()
    medications = State()

@router.callback_query(F.data == "start_test")
async def handle_start_test_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    await state.set_state(UserData.full_name)
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")
    await callback.answer()

@router.message(UserData.full_name)
async def process_full_name(message: Message, state: FSMContext) -> None:
    await state.update_data(full_name=message.text)
    await state.set_state(UserData.age)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫:")

@router.message(UserData.age)
async def process_age(message: Message, state: FSMContext) -> None:
    if not message.text.isdigit():
        return await message.answer("–í—ñ–∫ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
    await state.update_data(age=int(message.text))
    await state.set_state(UserData.height_weight)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑—Ä—ñ—Å—Ç/–≤–∞–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 175/70):")

@router.message(UserData.height_weight)
async def process_height_weight(message: Message, state: FSMContext) -> None:
    await state.update_data(height_weight=message.text)
    await state.set_state(UserData.diagnoses)
    await message.answer("–û–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –¥—ñ–∞–≥–Ω–æ–∑–∏ —Ç–∞ —Ö—Ä–æ–Ω—ñ—á–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è:")

@router.message(UserData.diagnoses)
async def process_diagnoses(message: Message, state: FSMContext) -> None:
    await state.update_data(diagnoses=message.text)
    await state.set_state(UserData.medications)
    await message.answer("–í–∏ –ø—Ä–∏–π–º–∞—î—Ç–µ –∑–∞—Ä–∞–∑ –ª—ñ–∫–∏? (—Ç–∞–∫/–Ω—ñ)")

@router.message(UserData.medications)
async def process_medications(message: Message, state: FSMContext) -> None:
    await state.update_data(medications=message.text)
    user_data = await state.get_data()
    await state.clear()


    await message.answer("–î—è–∫—É—é! –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç...")
    await reset_and_start_test(message.from_user.id, message.chat.id)

@router.message(Command("mainmenu"))
async def handle_mainmenu_command(message: types.Message) -> None:
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /mainmenu.")
    
    text = "üëã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    markup = get_main_menu()

    try:
        # Try to send the photo
        photo = FSInputFile(WELCOME_IMAGE_PATH)
        await message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ ({WELCOME_IMAGE_PATH}): {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        # If sending the photo fails, send only text with the markup
        await message.answer(
            text,
            reply_markup=markup
        )
async def send_next_question(user_id: int, chat_id: int) -> None:
    global user_last_question_msg_id
    qid = user_test_progress.get(user_id, 0)

    if qid >= len(color_dict):
        last_msg_id = user_last_question_msg_id.get(user_id, 0)
        if last_msg_id:
            try:
                await bot.delete_message(chat_id, last_msg_id)
            except (TelegramAPIError, TelegramBadRequest) as e:
                 logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º {last_msg_id} –¥–ª—è {user_id}: {e}")
            user_last_question_msg_id[user_id] = 0

        await send_results_or_subscribe_prompt(user_id, chat_id)
        return

    question_text = f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {qid + 1}/{len(color_dict)}: {list(color_dict.keys())[qid]}"
    buttons = get_answer_buttons(qid)
    last_msg_id = user_last_question_msg_id.get(user_id, 0)
    sent_message = None

    if last_msg_id:
        try:
            sent_message = await bot.edit_message_text(
                text=question_text,
                chat_id=chat_id,
                message_id=last_msg_id,
                reply_markup=buttons
            )
            logging.debug(f"–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {last_msg_id} –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è {qid} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        except TelegramBadRequest as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {last_msg_id} –¥–ª—è {user_id} (–º–æ–∂–ª–∏–≤–æ, —Ç–µ–∫—Å—Ç —Ç–æ–π —Å–∞–º–∏–π): {e}. –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ.")
            last_msg_id = 0
            user_last_question_msg_id[user_id] = 0
        except TelegramAPIError as e:
            # –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ API (–Ω–∞–ø—Ä., –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–µ)
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ API –ø—ñ–¥ —á–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {last_msg_id} –¥–ª—è {user_id}: {e}. –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ.")
            last_msg_id = 0
            user_last_question_msg_id[user_id] = 0

    if not sent_message:
        try:
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=question_text,
                reply_markup=buttons
            )
            logging.debug(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è {qid} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        except TelegramAPIError as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è {qid} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            return

    if sent_message:
        user_last_question_msg_id[user_id] = sent_message.message_id


async def reset_and_start_test(user_id: int, chat_id: int) -> None:
    """–°–∫–∏–¥–∞—î –ø—Ä–æ–≥—Ä–µ—Å —Ç–µ—Å—Ç—É —Ç–∞ –ø–æ—á–∏–Ω–∞—î –π–æ–≥–æ –∑–∞–Ω–æ–≤–æ."""
    global user_test_scores, user_test_progress, user_last_question_msg_id

    user_test_scores[user_id] = {color: 0 for color in list(color_dict.values())[0]}
    user_test_progress[user_id] = 0
    user_last_question_msg_id[user_id] = 0

    await save_user_data()
    await send_safe_message(chat_id, "üìù –¢–µ—Å—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —á–µ—Å–Ω–æ.")
    await send_next_question(user_id, chat_id)

@router.callback_query(F.data == "start_test")
async def handle_start_test_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    current_progress = user_test_progress.get(user_id, 0)

    if 0 < current_progress < len(color_dict):
        text = "üîÑ –í–∏ –≤–∂–µ –ø–æ—á–∞–ª–∏ —Ç–µ—Å—Ç. –ë–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?"
        markup = get_restart_buttons()
    elif current_progress >= len(color_dict):
        text = "üîÑ –í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç. –ë–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?"
        markup = get_restart_buttons()
    else:
        try:
            await callback.message.delete()
        except TelegramAPIError as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {callback.message.message_id} –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Ç–µ—Å—Ç—É –¥–ª—è {user_id}: {e}")
        await reset_and_start_test(user_id, chat_id)
        await callback.answer()
        return

    try:
        if callback.message.photo:
             await callback.message.edit_caption(caption=text, reply_markup=markup)
        else:
             await callback.message.edit_text(text, reply_markup=markup)
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user_id} –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Ç–µ—Å—Ç—É: {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ.")
        await callback.message.answer(text, reply_markup=markup)
        try: await callback.message.delete()
        except TelegramAPIError: pass

    await callback.answer()

@router.callback_query(F.data == "restart_test")
async def handle_restart_test_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    try:
        await callback.message.delete()
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {callback.message.message_id} –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—É –¥–ª—è {user_id}: {e}")
    await reset_and_start_test(user_id, chat_id)
    await callback.answer("–¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!")

@router.callback_query(F.data == "cancel_restart")
@router.callback_query(F.data == "cancel_start")
async def handle_cancel_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    user_last_question_msg_id[user_id] = 0
    text = "üëã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    markup = get_main_menu()
    try:
        if callback.message.photo:
            await callback.message.edit_caption(caption=text, reply_markup=markup)
        else:
            await callback.message.edit_text(text, reply_markup=markup)
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {user_id} –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ: {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ.")
        await callback.message.answer(text, reply_markup=markup)
        try: await callback.message.delete()
        except TelegramAPIError: pass
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

@router.callback_query(F.data.startswith(('yes_', 'no_', 'skip_')))
async def handle_answer_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    try:
        action, qid_str = callback.data.split('_', 1)
        qid = int(qid_str)
    except (ValueError, IndexError):
        logging.error(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.", show_alert=True)
        return

    current_progress = user_test_progress.get(user_id, -1)
    if qid != current_progress:
        await callback.answer("–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.", show_alert=True)
        return

    if action == "yes":
        question_key = list(color_dict.keys())[qid]
        for color, value in color_dict[question_key].items():
            current_scores = user_test_scores.setdefault(user_id, {c: 0 for c in list(color_dict.values())[0]})
            current_scores[color] = current_scores.get(color, 0) + value

    user_test_progress[user_id] = current_progress + 1
    await save_user_data()

    await send_next_question(user_id, chat_id)
    await callback.answer()

@router.callback_query(F.data == "check_subscription")
async def handle_check_subscription_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–ø–∏—Å–∫—É...")
    if await is_user_subscribed(user_id):
        await callback.message.edit_text("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –ù–∞–¥—Å–∏–ª–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")
        await send_results(user_id, chat_id)
    else:
        await callback.message.edit_text(
            "‚ùå –í–∏ –≤—Å–µ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.", reply_markup=get_subscribe_button())
    await callback.answer()

async def send_results_or_subscribe_prompt(user_id: int, chat_id: int) -> None:

    user_last_question_msg_id[user_id] = 0
    if await is_user_subscribed(user_id):
        await send_safe_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ì–æ—Ç—É—é –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")
        await send_results(user_id, chat_id)
    else:
        await send_safe_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è:", reply_markup=get_subscribe_button())

def evaluate_color_score(color: str, score: int) -> str:
    criteria = evaluation_criteria.get(color)
    if not criteria: return "–ù–µ–º–∞—î –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤"
    criteria_sorted = sorted(criteria, key=lambda x: x[0])
    for threshold, eval_str in criteria_sorted:
        if score <= threshold:
            return eval_str
    if criteria_sorted: return criteria_sorted[-1][1]
    return "–ù–µ–≤—ñ–¥–æ–º–æ"


async def send_results(user_id: int, chat_id: int) -> None:
    scores = user_test_scores.get(user_id)
    if not scores:
        await send_safe_message(chat_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        logging.warning(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –æ—á–∫—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")

        await send_safe_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())
        return

    sorted_scores = sorted(scores.items(), key=lambda item: item[1], reverse=True)
    result_lines = []
    for color, score in sorted_scores:
        evaluation = evaluate_color_score(color, score)
        icon = evaluation_icons.get(evaluation, '‚ö™')
        system_name = color_to_system.get(color, color.capitalize())
        result_lines.append(f"{icon} *{system_name}:* {evaluation}")

    result_text = "üìä *–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É:*\n\n" + "\n".join(result_lines)
    result_text += "\n\n–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!"

    try:
        photo = FSInputFile(RESULTS_IMAGE_PATH)
        await bot.send_photo(
            chat_id=chat_id, photo=photo, caption=result_text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ ({RESULTS_IMAGE_PATH}): {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        await send_safe_message(chat_id, result_text, parse_mode="Markdown")

    await send_safe_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=get_main_menu())

@router.callback_query(F.data == "start_weight_tracking")
async def handle_start_weight_tracking_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    global user_weight_data

    user_data = user_weight_data.get(user_id)

    if user_data:
        if user_data.get("finished"):
            await callback.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞'.", show_alert=True)
            return
        else:
            current_day = user_data.get("day", 1)
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (–∞–∫—Ç–∏–≤–Ω–∏–π —É—á–∞—Å–Ω–∏–∫, –¥–µ–Ω—å {current_day}) –∑–∞–ø—Ä–æ—Å–∏–≤ –º–µ–Ω—é.")
            await send_menu(user_id, current_day)
            await callback.answer(f"–ù–∞–¥—Å–∏–ª–∞—é –º–µ–Ω—é –Ω–∞ –î–µ–Ω—å {current_day}.")
            return

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' ({TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤).")
    user_weight_data[user_id] = {"weights": {}, "day": 1, "finished": False, "asked_today": False, "menu_sent_today": False}
    await save_user_data()

    try:
        if callback.message.photo:
             await callback.message.edit_caption(caption=WEIGHT_TRACKING_INSTRUCTIONS, reply_markup=None)
        else:
             await callback.message.edit_text(WEIGHT_TRACKING_INSTRUCTIONS, reply_markup=None)
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –¥–ª—è {user_id}: {e}")
        await callback.message.answer(WEIGHT_TRACKING_INSTRUCTIONS)
        try: await callback.message.delete()
        except TelegramAPIError: pass

    await send_menu(user_id, 1)
    user_weight_data[user_id]['menu_sent_today'] = True
    await ask_weight(user_id)
    user_weight_data[user_id]['asked_today'] = True
    await save_user_data()
    await callback.answer()

async def send_menu(user_id: int, day: int) -> None:
    menu_text = MENUS.get(day)
    if menu_text:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω—é –î–Ω—è {day}/{TOTAL_WEIGHT_TRACKING_DAYS} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        if day == 3:
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=" –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")]])
            full_text = f"Ô∏è *–ú–µ–Ω—é –Ω–∞ –î–µ–Ω—å {day}*\n\n{menu_text}"
            await send_safe_message(user_id, full_text, reply_markup=markup, parse_mode="Markdown")
        else:
            full_text = f"Ô∏è *–ú–µ–Ω—é –Ω–∞ –î–µ–Ω—å {day}*\n\n{menu_text}"
            await send_safe_message(user_id, full_text, parse_mode="Markdown")
    else:
        logging.warning(f"–ú–µ–Ω—é –¥–ª—è –¥–Ω—è {day} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ color_data.MENUS!")
        await send_safe_message(user_id, f"‚ö†Ô∏è –ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –º–µ–Ω—é –¥–ª—è –¥–Ω—è {day}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
async def ask_weight(user_id: int) -> None:

    logging.info(f"–ó–∞–ø–∏—Ç –≤–∞–≥–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    await send_safe_message(user_id, WEIGHT_QUESTION)


@router.message(F.text.regexp(r'^\d+([.,]\d+)?$'))
async def handle_weight_input(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    global user_weight_data
    if user_id not in user_weight_data or not user_weight_data[user_id] or user_weight_data[user_id].get("finished"):
        return
    try:
        weight_str = message.text.replace(',', '.')
        weight = float(weight_str)
        if not (20 < weight < 300): raise ValueError("–ù–µ—Ä–µ–∞–ª—å–Ω–∞ –≤–∞–≥–∞")
    except ValueError:
        await message.reply("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 75.5 –∞–±–æ 75,5).")
        return
    today_str = datetime.now().strftime("%Y-%m-%d")
    user_data = user_weight_data[user_id]
    if today_str in user_data.get("weights", {}):
        await message.reply(f"‚ö†Ô∏è –í–∞–≥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today_str}) –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞: {user_data['weights'][today_str]:.1f} –∫–≥.")
        return

    user_data.setdefault("weights", {})[today_str] = weight
    current_day = user_data.get("day", 1)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –≤–∞–≥—É {weight:.1f} –∫–≥ –∑–∞ {today_str} (–î–µ–Ω—å {current_day}/{TOTAL_WEIGHT_TRACKING_DAYS})")
    await message.reply(f"‚úÖ –í–∞–≥–∞ {weight:.1f} –∫–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ (–î–µ–Ω—å {current_day}/{TOTAL_WEIGHT_TRACKING_DAYS}). –î—è–∫—É—é!")

    if current_day >= TOTAL_WEIGHT_TRACKING_DAYS:
        user_data["finished"] = True
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–≤–µ—Ä—à–∏–≤ –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' ({TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤).")
        all_weights = list(user_data["weights"].values())
        if len(all_weights) >= 1:
            first_day_weight = all_weights[0]; last_day_weight = weight
            weight_diff = last_day_weight - first_day_weight; sign = "+" if weight_diff >= 0 else ""
            num_days_participated = len(all_weights)
            await send_safe_message(chat_id, f"üéâ –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìâ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {num_days_participated} –¥–Ω.: {sign}{weight_diff:.1f} –∫–≥.\n–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!")
            await send_safe_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=get_main_menu())
        else: await send_safe_message(chat_id, "üéâ –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!")
    await save_user_data()

async def scheduler():
    logging.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ.")
    while True:
        now = datetime.now(); current_time = now.time(); today_str = now.strftime("%Y-%m-%d")
        active_user_ids = list(user_weight_data.keys())
        for user_id in active_user_ids:

            user_data = user_weight_data.get(user_id)
            if not user_data or user_data.get("finished"): continue

            user_day = user_data.get("day", 1)

            if current_time.hour == 0 and current_time.minute == 1:
                if user_data.get('menu_sent_today') or user_data.get('asked_today'):
                     logging.debug(f"–°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ –¥–ª—è {user_id}")
                     user_data['menu_sent_today'] = False; user_data['asked_today'] = False
                     await save_user_data()

            if current_time.hour == MENU_TIME.hour and current_time.minute == MENU_TIME.minute:
                if not user_data.get('menu_sent_today'):
                    if user_day <= TOTAL_WEIGHT_TRACKING_DAYS:
                        await send_menu(user_id, user_day)
                        user_data['menu_sent_today'] = True

                        if user_day < TOTAL_WEIGHT_TRACKING_DAYS:
                             user_data['day'] += 1
                             logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∏–π –Ω–∞ –î–µ–Ω—å {user_data['day']}")
                        await save_user_data()

            if current_time.hour == WEIGHT_TIME.hour and current_time.minute == WEIGHT_TIME.minute:

                if today_str not in user_data.get("weights", {}):
                     if not user_data.get('asked_today'):
                        await ask_weight(user_id)
                        user_data['asked_today'] = True
                        await save_user_data()

        await asyncio.sleep(60)

async def main() -> None:
    await load_user_data()
    dp.include_router(router)
    asyncio.create_task(scheduler())
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (polling)...")
    await dp.start_polling(bot)
    logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É (Ctrl+C)")