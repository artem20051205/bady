import asyncio
import json
import logging
import os
from collections import defaultdict
from typing import Dict, Any, Optional
from datetime import datetime, time

import aiofiles
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import config
from color_data import (
    color_dict, evaluation_criteria, color_to_system, evaluation_icons, MENUS
)
from test_handlers import router as test_router

API_TOKEN: str = config.API_TOKEN
CHANNEL_ID: int = config.CHANNEL_ID
MENU_TIME = time(8, 0)
WEIGHT_TIME = time(20, 0)
TOTAL_WEIGHT_TRACKING_DAYS = 7

USER_DATA_DIR = "user_data"

# Ensure the directory for user data exists
os.makedirs(USER_DATA_DIR, exist_ok=True)

WEIGHT_TRACKING_INSTRUCTIONS = (
    "üìã –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–ø—É—â–µ–Ω–æ!\n\n"
    f"–Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –≤–∞–º –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —â–æ—Ä–∞–Ω–∫—É –æ {MENU_TIME.strftime('%H:%M')} "
    f"—Ç–∞ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏–º—É –≤–∞—à—É –≤–∞–≥—É —â–æ–≤–µ—á–æ—Ä–∞ –æ {WEIGHT_TIME.strftime('%H:%M')} "
    f"–ø—Ä–æ—Ç—è–≥–æ–º {TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤."
)
WEIGHT_QUESTION = "‚öñÔ∏è –Ø–∫–∞ —É –≤–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∞–≥–∞? –ù–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 75.5 –∞–±–æ 75,5)."
WEIGHT_REMINDER = "‚è∞ –ù–∞–≥–∞–¥—É—é, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –≤–∞–≥—É."

WELCOME_IMAGE_PATH = "img/1.png"
RESULTS_IMAGE_PATH = "img/1.png"

SUPPORT_USERNAME = "@MRartemkaa"  # Replace with the actual username for support

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()
router: Router = Router()

user_weight_data: Dict[int, Dict[str, Any]] = defaultdict(dict)
user_last_question_msg_id: Dict[int, int] = defaultdict(int)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def save_user_to_json(user_id: int, data: dict):
    """Save user data to a JSON file."""
    user_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
    try:
        with open(user_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logging.info(f"–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª {user_file}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —É —Ñ–∞–π–ª {user_file}: {e}")

def load_user_from_json(user_id: int) -> dict:
    """Load user data from a JSON file."""
    user_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
    if os.path.exists(user_file):
        try:
            with open(user_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            logging.info(f"–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É {user_file}")
            return data
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ —Ñ–∞–π–ª—É {user_file}: {e}")
    return {}

async def save_user_data(user_id: int, key: str, value: Any) -> None:
    """Save specific user data to their JSON file."""
    user_data = load_user_from_json(user_id)
    user_data[key] = value
    save_user_to_json(user_id, user_data)

async def load_user_data(user_id: int, key: str) -> Any:
    """Load specific user data from their JSON file."""
    user_data = load_user_from_json(user_id)
    return user_data.get(key)

async def send_safe_message(user_id: int, text: str, **kwargs):
    try:
        await bot.send_message(user_id, text, **kwargs)
    except TelegramAPIError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

async def is_user_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
    except TelegramAPIError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤ –∫–∞–Ω–∞–ª—ñ {CHANNEL_ID}: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        return False


def create_buttons(buttons: list[tuple[str, str]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=text, callback_data=callback)] for text, callback in buttons]
    )

def get_subscribe_button() -> InlineKeyboardMarkup:
    channel_link = getattr(config, 'CHANNEL_LINK', "https://t.me/tteessttooss")
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=channel_link)],
            [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )

def get_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ú–µ–Ω—é", callback_data="start_weight"),
                InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")
            ],
            [
                InlineKeyboardButton(text="üéß –ó–≤'—è–∑–æ–∫ –∑ –Ω–∞–º–∏", callback_data="call_center")
            ]
        ]
    )

@router.callback_query(F.data == "call_center")
async def handle_call_center_callback(callback: types.CallbackQuery) -> None:
    """Handle the 'Contact Us' button."""
    await callback.message.answer(f"–î–ª—è –∑–≤'—è–∑–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–∞–ø–∏—à—ñ—Ç—å: {SUPPORT_USERNAME}")
    await callback.answer()

@router.message(CommandStart())
async def send_welcome(message: types.Message) -> None:
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({message.from_user.full_name}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.")
    # –°–∫–∏–¥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∏–Ω–∞—î –∑ /start
    user_last_question_msg_id[user_id] = 0
    caption = f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    try:
        photo = FSInputFile(WELCOME_IMAGE_PATH)
        await message.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ ({WELCOME_IMAGE_PATH}): {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        await message.answer(
            caption,
            reply_markup=get_main_menu()
        )

@router.message(Command("mainmenu"))
async def handle_mainmenu_command(message: types.Message) -> None:
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /mainmenu.")
    
    text = "üëã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    markup = get_main_menu()

    try:
        photo = FSInputFile(WELCOME_IMAGE_PATH)
        await message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ ({WELCOME_IMAGE_PATH}): {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        # If sending the photo fails, send only text with the markup
        await message.answer(
            text,
            reply_markup=markup
        )

@router.callback_query(F.data == "check_subscription")
async def handle_check_subscription_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–ø–∏—Å–∫—É...")
    if await is_user_subscribed(user_id):
        await callback.message.edit_text("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –ù–∞–¥—Å–∏–ª–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")
        await send_results(user_id, chat_id)
    else:
        await callback.message.edit_text(
            "‚ùå –í–∏ –≤—Å–µ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.", reply_markup=get_subscribe_button())
    await callback.answer()

async def send_results(user_id: int, chat_id: int) -> None:
    await send_safe_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())

@router.callback_query(F.data == "start_weight")
async def handle_start_weight_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    global user_weight_data

    user_data = user_weight_data.get(user_id)

    if user_data:
        if user_data.get("finished"):
            await callback.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞'.", show_alert=True)
            return
        else:
            current_day = user_data.get("day", 1)
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (–∞–∫—Ç–∏–≤–Ω–∏–π —É—á–∞—Å–Ω–∏–∫, –¥–µ–Ω—å {current_day}) –∑–∞–ø—Ä–æ—Å–∏–≤ –º–µ–Ω—é.")
            await send_menu(user_id, current_day)
            await callback.answer(f"–ù–∞–¥—Å–∏–ª–∞—é –º–µ–Ω—é –Ω–∞ –î–µ–Ω—å {current_day}.")
            return

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' ({TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤).")
    user_weight_data[user_id] = {"weights": {}, "day": 1, "finished": False, "asked_today": False, "menu_sent_today": False}
    await save_user_data(user_id, "weight_data", user_weight_data[user_id])

    try:
        if callback.message.photo:
             await callback.message.edit_caption(caption=WEIGHT_TRACKING_INSTRUCTIONS, reply_markup=None)
        else:
             await callback.message.edit_text(WEIGHT_TRACKING_INSTRUCTIONS, reply_markup=None)
    except TelegramAPIError as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –¥–ª—è {user_id}: {e}")
        await callback.message.answer(WEIGHT_TRACKING_INSTRUCTIONS)
        try: await callback.message.delete()
        except TelegramAPIError: pass

    await send_menu(user_id, 1)
    user_weight_data[user_id]['menu_sent_today'] = True
    await ask_weight(user_id)
    user_weight_data[user_id]['asked_today'] = True
    await save_user_data(user_id, "weight_data", user_weight_data[user_id])
    await callback.answer()

async def send_menu(user_id: int, day: int) -> None:
    menu_text = MENUS.get(day)
    if menu_text:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω—é –î–Ω—è {day}/{TOTAL_WEIGHT_TRACKING_DAYS} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        if day == 3:
            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=" –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")]])
            full_text = f"Ô∏è *–ú–µ–Ω—é –Ω–∞ –î–µ–Ω—å {day}*\n\n{menu_text}"
            await send_safe_message(user_id, full_text, reply_markup=markup, parse_mode="Markdown")
        else:
            full_text = f"Ô∏è *–ú–µ–Ω—é –Ω–∞ –î–µ–Ω—å {day}*\n\n{menu_text}"
            await send_safe_message(user_id, full_text, parse_mode="Markdown")
    else:
        logging.warning(f"–ú–µ–Ω—é –¥–ª—è –¥–Ω—è {day} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ color_data.MENUS!")
        await send_safe_message(user_id, f"‚ö†Ô∏è –ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –º–µ–Ω—é –¥–ª—è –¥–Ω—è {day}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
async def ask_weight(user_id: int) -> None:

    logging.info(f"–ó–∞–ø–∏—Ç –≤–∞–≥–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    await send_safe_message(user_id, WEIGHT_QUESTION)


@router.message(F.text.regexp(r'^\d+([.,]\d+)?$'))
async def handle_weight_input(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    global user_weight_data

    if user_id not in user_weight_data or not user_weight_data[user_id] or user_weight_data[user_id].get("finished"):
        return

    try:
        weight_str = message.text.replace(',', '.')
        weight = float(weight_str)
        if not (20 < weight < 300):
            raise ValueError("–ù–µ—Ä–µ–∞–ª—å–Ω–∞ –≤–∞–≥–∞")
    except ValueError:
        await message.reply("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 75.5 –∞–±–æ 75,5).")
        return

    today_str = datetime.now().strftime("%Y-%m-%d")
    user_data = user_weight_data[user_id]

    if today_str in user_data.get("weights", {}):
        await message.reply(f"‚ö†Ô∏è –í–∞–≥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today_str}) –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞: {user_data['weights'][today_str]:.1f} –∫–≥.")
        return

    # Save the weight for today
    user_data.setdefault("weights", {})[today_str] = weight
    user_data["asked_today"] = True  # Mark as asked for today
    current_day = user_data.get("day", 1)

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –≤–∞–≥—É {weight:.1f} –∫–≥ –∑–∞ {today_str} (–î–µ–Ω—å {current_day}/{TOTAL_WEIGHT_TRACKING_DAYS})")
    await message.reply(f"‚úÖ –í–∞–≥–∞ {weight:.1f} –∫–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ (–î–µ–Ω—å {current_day}/{TOTAL_WEIGHT_TRACKING_DAYS}). –î—è–∫—É—é!")

    # Check if the program is finished
    if current_day >= TOTAL_WEIGHT_TRACKING_DAYS:
        user_data["finished"] = True
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–≤–µ—Ä—à–∏–≤ –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' ({TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤).")
        all_weights = list(user_data["weights"].values())
        if len(all_weights) >= 1:
            first_day_weight = all_weights[0]
            last_day_weight = weight
            weight_diff = last_day_weight - first_day_weight
            sign = "+" if weight_diff >= 0 else ""
            num_days_participated = len(all_weights)
            await send_safe_message(chat_id, f"üéâ –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìâ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {num_days_participated} –¥–Ω.: {sign}{weight_diff:.1f} –∫–≥.\n–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!")
            await send_safe_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=get_main_menu())
        else:
            await send_safe_message(chat_id, "üéâ –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!")

    # Save updated user data
    await save_user_data(user_id, "weight_data", user_data)

async def scheduler():
    logging.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ.")
    while True:
        now = datetime.now(); current_time = now.time(); today_str = now.strftime("%Y-%m-%d")
        active_user_ids = list(user_weight_data.keys())
        for user_id in active_user_ids:

            user_data = user_weight_data.get(user_id)
            if not user_data or user_data.get("finished"): continue

            user_day = user_data.get("day", 1)

            if current_time.hour == 0 and current_time.minute == 1:
                if user_data.get('menu_sent_today') or user_data.get('asked_today'):
                     logging.debug(f"–°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ –¥–ª—è {user_id}")
                     user_data['menu_sent_today'] = False; user_data['asked_today'] = False
                     await save_user_data(user_id, "weight_data", user_data)

            if current_time.hour == MENU_TIME.hour and current_time.minute == MENU_TIME.minute:
                if not user_data.get('menu_sent_today'):
                    if user_day <= TOTAL_WEIGHT_TRACKING_DAYS:
                        await send_menu(user_id, user_day)
                        user_data['menu_sent_today'] = True

                        if user_day < TOTAL_WEIGHT_TRACKING_DAYS:
                             user_data['day'] += 1
                             logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∏–π –Ω–∞ –î–µ–Ω—å {user_data['day']}")
                        await save_user_data(user_id, "weight_data", user_data)

            if current_time.hour == WEIGHT_TIME.hour and current_time.minute == WEIGHT_TIME.minute:

                if today_str not in user_data.get("weights", {}):
                     if not user_data.get('asked_today'):
                        await ask_weight(user_id)
                        user_data['asked_today'] = True
                        await save_user_data(user_id, "weight_data", user_data)

        await asyncio.sleep(60)

async def main() -> None:
    dp.include_router(router)
    dp.include_router(test_router)  # Include the test router
    asyncio.create_task(scheduler())
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (polling)...")
    await dp.start_polling(bot)
    logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É (Ctrl+C)")