import logging
import asyncio
import json
import os
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ChatMemberStatus
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import CommandStart
from color_data import color_dict, evaluation_criteria, color_to_system, evaluation_icons
import config

API_TOKEN = config.API_TOKEN
CHANNEL_ID = config.CHANNEL_ID
DATA_FILE = config.DATA_FILE
PHOTO_PATH = config.PHOTO_PATH


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞

def load_user_data():
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {'scores': {}, 'progress': {}}

def save_user_data(data):
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = load_user_data()
user_scores = defaultdict(lambda: {color: 0 for color in list(color_dict.values())[0]}, user_data.get('scores', {}))
user_progress = defaultdict(int, user_data.get('progress', {}))

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def update_user_data():
    save_user_data({'scores': dict(user_scores), 'progress': dict(user_progress)})

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫

def get_answer_buttons(question_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data=f"yes_{question_id}")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data=f"no_{question_id}")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_{question_id}")]
    ])

def get_subscribe_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=f"https://t.me/{CHANNEL_ID}")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

def get_start_test_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="start_test")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_start")]
    ])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
def get_restart_test_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –¢–∞–∫, –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="restart_test")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_restart")]
    ])

@router.message(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_progress and user_progress[user_id] > 0:
        await message.answer("–í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑?", reply_markup=get_restart_test_buttons())
    else:
        await message.answer("–í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?", reply_markup=get_start_test_buttons())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(lambda c: c.data == "restart_test")
async def restart_test(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_scores[user_id] = {color: 0 for color in list(color_dict.values())[0]}
    user_progress[user_id] = 0
    update_user_data()
    
    await callback_query.message.edit_text("–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ! –û—Å—å –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")
    await send_next_question(user_id, callback_query.message)

@router.callback_query(lambda c: c.data == "cancel_restart")
async def cancel_restart(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–î–æ–±—Ä–µ! –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start")

@router.callback_query(lambda c: c.data == "start_test")
async def start_test(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_scores[user_id] = {color: 0 for color in list(color_dict.values())[0]}
    user_progress[user_id] = 0
    update_user_data()
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —É–¥–∞–ª—è–µ–º
    await callback_query.message.edit_text("–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç! –û—Å—å –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")
    await send_next_question(user_id, callback_query.message)

async def send_next_question(user_id, message):
    question_id = user_progress[user_id]
    if question_id < len(color_dict):
        question_text = list(color_dict.keys())[question_id]
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        await message.edit_text(
            f"–ü–∏—Ç–∞–Ω–Ω—è {question_id + 1}: {question_text}",
            reply_markup=get_answer_buttons(question_id)
        )
    else:
        await check_subscription(user_id, message)

@router.callback_query(lambda c: c.data.startswith(('yes_', 'no_', 'skip_')))
async def handle_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    answer_type, question_id = callback_query.data.split('_')
    question_id = int(question_id)

    if answer_type == "yes":
        for color, value in color_dict[list(color_dict.keys())[question_id]].items():
            user_scores[user_id][color] += value
    
    user_progress[user_id] += 1
    update_user_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    await send_next_question(user_id, callback_query.message)

async def check_subscription(user_id, message):
    try:
        chat_member = await bot.get_chat_member(f"@{CHANNEL_ID}", user_id)
        if chat_member.status not in ["left", "kicked"]:
            await send_results(user_id, message)  # –ü–µ—Ä–µ–¥–∞–µ–º message –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        else:
            await message.edit_text(
                "‚ùå –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=get_subscribe_button()
            )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        await message.edit_text(
            "‚ùå –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=get_subscribe_button()
        )

@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await check_subscription(callback_query.from_user.id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_results(user_id, message):
    scores = user_scores.get(user_id, {})
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    
    result_text = "‚¨áÔ∏è *–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:*\n"
    for color, score in sorted_scores:
        evaluation = evaluate_color_score(color, score)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        system_name = color_to_system.get(color, "–ù–µ–≤—ñ–¥–æ–º–∞ —Å–∏—Å—Ç–µ–º–∞")
        icon = evaluation_icons.get(evaluation, "‚ö™")  # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
        
        result_text += f"{icon} {system_name}: {evaluation}\n"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    try:
        photo = FSInputFile(PHOTO_PATH)
        await bot.send_photo(user_id, photo, caption=result_text.strip(), parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.edit_text(result_text.strip(), parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ü–≤–µ—Ç—É
def evaluate_color_score(color, score):
    for threshold, evaluation in evaluation_criteria[color]:
        if score <= threshold:
            return evaluation

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
