import logging
import asyncio
import json
import os
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ChatMemberStatus
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
import config
import aiofiles
from color_data import color_dict, evaluation_criteria, color_to_system, evaluation_icons

API_TOKEN, CHANNEL_ID, DATA_FILE = config.API_TOKEN, config.CHANNEL_ID, config.DATA_FILE
bot, dp, router = Bot(token=API_TOKEN), Dispatcher(), Router()
data_lock = asyncio.Lock()

user_data = {}
user_scores = defaultdict(lambda: {color: 0 for color in list(color_dict.values())[0]})
user_progress = defaultdict(int)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)s")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
async def load_user_data():
    if os.path.exists(DATA_FILE):
        async with aiofiles.open(DATA_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.loads(await f.read()) or {'scores': {}, 'progress': {}}
            except json.JSONDecodeError:
                logging.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
    return {'scores': {}, 'progress': {}}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
async def save_user_data():
    async with data_lock, aiofiles.open(DATA_FILE, 'w', encoding='utf-8') as f:
        await f.write(json.dumps({'scores': dict(user_scores), 'progress': dict(user_progress)}, ensure_ascii=False, indent=4))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def init_user_data():
    global user_data, user_scores, user_progress
    user_data = await load_user_data()
    user_scores.update(user_data.get('scores', {}))
    user_progress.update(user_data.get('progress', {}))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
async def is_user_subscribed(user_id: int) -> bool:
    try:
        status = (await bot.get_chat_member(CHANNEL_ID, user_id)).status
        return status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
    return False

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
def create_buttons(buttons):
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=text, callback_data=callback)] for text, callback in buttons])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
def get_answer_buttons(qid):
    return create_buttons([("‚úÖ –¢–∞–∫", f"yes_{qid}"), ("‚ùå –ù—ñ", f"no_{qid}"), ("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", f"skip_{qid}")])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscribe_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url="https://t.me/tteessttooss")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞
def get_start_buttons():
    return create_buttons([("‚úÖ –¢–∞–∫", "start_test"), ("‚ùå –ù—ñ", "cancel_start")])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
def get_restart_buttons():
    return create_buttons([("üîÑ –¢–∞–∫, –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", "restart_test"), ("‚ùå –ù—ñ", "cancel_restart")])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚öôÔ∏è –û–ø—Ü—ñ—è 1 (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", callback_data="dev_1"),
            InlineKeyboardButton(text="üîß –û–ø—Ü—ñ—è 2 (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", callback_data="dev_2")
        ],
        [
            InlineKeyboardButton(text="üìú –û–ø—Ü—ñ—è 3 (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", callback_data="dev_3"),
            InlineKeyboardButton(text="üéØ –û–ø—Ü—ñ—è 4 (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)", callback_data="dev_4")
        ],
        [
            InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")
        ]
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def send_welcome(message: types.Message):
    photo = FSInputFile("img/1.png")
    await message.answer_photo(photo=photo, caption="üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(lambda c: c.data == "start_test")
async def start_test(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if user_progress[user_id] > 0:
        await callback.message.answer("üîÑ –í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –•–æ—á–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ?", reply_markup=get_restart_buttons())
        return

    await reset_and_start_test(user_id, callback.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(lambda c: c.data == "restart_test")
async def restart_test(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await reset_and_start_test(user_id, callback.message)

# –°–±—Ä–æ—Å –∏ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
async def reset_and_start_test(user_id, message):
    user_scores[user_id] = {color: 0 for color in list(color_dict.values())[0]}
    user_progress[user_id] = 0
    await save_user_data()

    await message.answer("–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç!")
    await send_next_question(user_id, message)

last_message_was_question = defaultdict(bool)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_next_question(user_id, message):
    qid = user_progress[user_id]

    if qid >= len(color_dict):
        await send_results(user_id, message)
        last_message_was_question[user_id] = False
        return

    question_text = f"–ü–∏—Ç–∞–Ω–Ω—è {qid + 1}: {list(color_dict.keys())[qid]}"
    buttons = get_answer_buttons(qid)

    if last_message_was_question[user_id]:
        try:
            await message.edit_text(question_text, reply_markup=buttons)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await message.answer(question_text, reply_markup=buttons)
    else:
        await message.answer(question_text, reply_markup=buttons)

    last_message_was_question[user_id] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@router.callback_query(lambda c: c.data.startswith(('yes_', 'no_', 'skip_')))
async def handle_answer(callback: types.CallbackQuery):
    user_id, qid = callback.from_user.id, int(callback.data.split('_')[1])
    if "yes" in callback.data:
        for color, value in color_dict[list(color_dict.keys())[qid]].items():
            user_scores[user_id][color] += value
    user_progress[user_id] += 1
    await save_user_data()
    await send_next_question(user_id, callback.message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def check_subscription(user_id, message):
    if await is_user_subscribed(user_id):
        await send_results(user_id, message)
    else:
        await message.edit_text("‚ùå –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=get_subscribe_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    await callback.message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –û—Å—å –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:") if await is_user_subscribed(callback.from_user.id) else await callback.message.edit_text("‚ùå –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=get_subscribe_button())
    if await is_user_subscribed(callback.from_user.id):
        await send_results(callback.from_user.id, callback.message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def send_results(user_id, message):
    scores = user_scores.get(user_id, {})
    if not scores:
        return await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")

    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    result_text = "‚¨áÔ∏è *–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:*\n" + "\n".join(
        f"{evaluation_icons.get(evaluate_color_score(color, score), '‚ö™')} *{color_to_system.get(color, '–ù–µ–≤—ñ–¥–æ–º–∞ —Å–∏—Å—Ç–µ–º–∞')}:* {evaluate_color_score(color, score)}"
        for color, score in sorted_scores
    )

    try:
        photo = FSInputFile("img/1.png")
        await bot.send_photo(chat_id=user_id, photo=photo, caption=result_text, parse_mode="Markdown")
        await message.edit_text("‚úÖ –í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", reply_markup=None)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ –∞–±–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.answer(result_text.strip(), parse_mode="Markdown")

# –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Ü–≤–µ—Ç—É
def evaluate_color_score(color, score):
    return next((eval for threshold, eval in evaluation_criteria[color] if score <= threshold), "–ù–µ–≤—ñ–¥–æ–º–æ")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await init_user_data()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
