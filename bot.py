import logging
import asyncio
import json
import os
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ChatMemberStatus
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram import F
from aiogram.types import FSInputFile

from color_data import color_dict

API_TOKEN = "7930245702:AAGUmtTAd1YV2zKDBLIBb1hgewYFaFtH3mI"
CHANNEL_ID = "@tteessttooss"
photo = FSInputFile("img/1.png")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ
DATA_FILE = 'user_data.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levellevelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
user_scores = load_user_data().get('scores', defaultdict(lambda: {color: 0 for color in next(iter(color_dict.values()))}))
user_progress = load_user_data().get('progress', defaultdict(int))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
def get_answer_buttons(question_id):
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data=f"yes_{question_id}")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data=f"no_{question_id}")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_{question_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscribe_button():
    return InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def reset_user_data(user_id):
    user_scores[user_id] = {color: 0 for color in next(iter(color_dict.values()))}
    user_progress[user_id] = 0
    update_user_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
def get_start_test_buttons():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="start_test")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_start")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer("–í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?", reply_markup=get_start_test_buttons())

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def send_next_question(user_id):
    question_id = user_progress[user_id]
    if question_id < len(color_dict):
        question_text = list(color_dict.keys())[question_id]
        logging.debug(f"–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–∏—Ç–∞–Ω–Ω—è {question_id + 1} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        await bot.send_message(user_id, f"–ü–∏—Ç–∞–Ω–Ω—è {question_id + 1}: {question_text}", reply_markup=get_answer_buttons(question_id))
    else:
        await check_subscription(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
@router.callback_query(F.data.startswith(('yes_', 'no_', 'skip_')))
async def handle_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    answer_type, question_id = callback_query.data.split('_')
    question_id = int(question_id)

    if answer_type == "yes":
        for color, value in color_dict[list(color_dict.keys())[question_id]].items():
            user_scores[user_id][color] += value

    user_progress[user_id] += 1
    update_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await callback_query.message.delete()
    await send_next_question(user_id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def check_subscription(user_id):
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
            await send_results(user_id)
        else:
            await bot.send_message(user_id, f"‚ùå –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_ID}", reply_markup=get_subscribe_button())
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        await bot.send_message(user_id, f"‚ùå –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_ID}", reply_markup=get_subscribe_button())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.delete()
    await check_subscription(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data == "restart_test")
async def restart_test(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    reset_user_data(user_id)
    await callback_query.message.delete()
    await callback_query.message.answer("–î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º–æ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É. –ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ –ø–∏—Ç–∞–Ω–Ω—è–º–∏.")
    await send_next_question(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data == "cancel_restart")
async def cancel_restart(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer("–î–æ–±—Ä–µ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data == "start_test")
async def start_test(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id in user_scores:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É", callback_data="restart_test")],
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_restart")]
        ])
        await callback_query.message.answer_photo(photo, caption="–í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É?", reply_markup=buttons)
    else:
        user_scores[user_id] = {color: 0 for color in next(iter(color_dict.values()))}
        user_progress[user_id] = 0
        update_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await callback_query.message.answer_photo(photo, caption="–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º–æ —Ç–µ—Å—Ç. –ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ –ø–∏—Ç–∞–Ω–Ω—è–º–∏.")
        await send_next_question(user_id)
    await callback_query.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data == "cancel_start")
async def cancel_start(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer("–î–æ–±—Ä–µ, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")

# –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
evaluation_criteria = {
    "yellow": [(2, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (4, "–¥–æ–±—Ä–µ"), (9, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "green": [(2, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (4, "–¥–æ–±—Ä–µ"), (9, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "cyan": [(2, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (3, "–¥–æ–±—Ä–µ"), (7, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "red": [(2, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (5, "–¥–æ–±—Ä–µ"), (9, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "gray": [(2, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (4, "–¥–æ–±—Ä–µ"), (7, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "purple": [(0, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (3, "–¥–æ–±—Ä–µ"), (5, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "orange": [(0, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (1, "–¥–æ–±—Ä–µ"), (4, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "magenta": [(2, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (5, "–¥–æ–±—Ä–µ"), (9, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "blue": [(1, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (3, "–¥–æ–±—Ä–µ"), (8, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")],
    "pink": [(1, "–¥—É–∂–µ –¥–æ–±—Ä–µ"), (3, "–¥–æ–±—Ä–µ"), (6, "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"), (float('inf'), "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ")]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ü–≤–µ—Ç—É
def evaluate_color_score(color, score):
    for threshold, evaluation in evaluation_criteria[color]:
        if score <= threshold:
            return f"{color.capitalize()}: {evaluation}"

# Mapping of colors to system names
color_to_system = {
    "yellow": "–¢—Ä–∞–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞",
    "green": "–®–ª—É–Ω–∫–æ–≤–æ-–∫–∏—à–∫–æ–≤–∏–π —Ç—Ä–∞–∫—Ç",
    "cyan": "–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞",
    "red": "–ù–µ—Ä–≤–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞",
    "gray": "–Ü–º—É–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞",
    "purple": "–î–∏—Ö–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞",
    "orange": "–°–µ—á–æ–≤–∏–¥—ñ–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞",
    "magenta": "–ï–Ω–¥–æ–∫—Ä–∏–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞",
    "blue": "–û–ø–æ—Ä–Ω–æ-—Ä—É—Ö–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞",
    "pink": "–®–∫—ñ—Ä–∞"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def send_results(user_id):
    scores = user_scores[user_id]
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)

    result_text = "üé® *–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:*\n"
    for color, score in sorted_scores:
        evaluation = evaluate_color_score(color, score)
        if "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ" in evaluation or "–Ω–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ" in evaluation:
            system_name = color_to_system[color]
            result_text += f"{system_name}: {score} –±–∞–ª—ñ–≤\n"
            result_text += f"{evaluation}\n\n"

    await bot.send_photo(user_id, photo, caption=result_text.strip(), parse_mode="Markdown")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
def update_user_data():
    data = {
        'scores': user_scores,
        'progress': user_progress
    }
    save_user_data(data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Aiogram 3.x)
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
