import logging
import asyncio
import json
import os
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ChatMemberStatus
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import CommandStart
from color_data import color_dict, evaluation_criteria, color_to_system, evaluation_icons
import config
import aiofiles

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
API_TOKEN = config.API_TOKEN
CHANNEL_ID = config.CHANNEL_ID
DATA_FILE = config.DATA_FILE
PHOTO_PATH = config.PHOTO_PATH
data_lock = asyncio.Lock()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
user_scores = defaultdict(lambda: {color: 0 for color in list(color_dict.values())[0]})
user_progress = defaultdict(int)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
async def load_user_data():
    async with data_lock:
        if os.path.exists(DATA_FILE):
            try:
                async with aiofiles.open(DATA_FILE, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    return json.loads(content) if content else {'scores': {}, 'progress': {}}
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {'scores': {}, 'progress': {}}

async def save_user_data(data):
    async with data_lock:
        try:
            async with aiofiles.open(DATA_FILE, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(data, ensure_ascii=False, indent=4))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

async def init_user_data():
    global user_data, user_scores, user_progress
    user_data = await load_user_data()
    user_scores = defaultdict(lambda: {color: 0 for color in list(color_dict.values())[0]}, user_data.get('scores', {}))
    user_progress = defaultdict(int, user_data.get('progress', {}))

async def update_user_data():
    asyncio.create_task(save_user_data({'scores': dict(user_scores), 'progress': dict(user_progress)}))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_user_subscribed(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
def get_answer_buttons(question_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data=f"yes_{question_id}")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data=f"no_{question_id}")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip_{question_id}")]
    ])

def get_subscribe_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=f"https://t.me/tteessttooss")],
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

def get_start_test_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="start_test")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_start")]
    ])

def get_restart_test_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –¢–∞–∫, –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="restart_test")],
        [InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_restart")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_progress and user_progress[user_id] > 0:
        await message.answer("–í–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑?", reply_markup=get_restart_test_buttons())
    else:
        await message.answer("–í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?", reply_markup=get_start_test_buttons())

@router.callback_query(lambda c: c.data == "restart_test")
async def restart_test(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_scores[user_id] = {color: 0 for color in list(color_dict.values())[0]}
    user_progress[user_id] = 0
    await update_user_data()

    await callback_query.message.edit_text("–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ! –û—Å—å –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")
    await send_next_question(user_id, callback_query.message)

@router.callback_query(lambda c: c.data == "cancel_restart")
async def cancel_restart(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–î–æ–±—Ä–µ! –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start")

@router.callback_query(lambda c: c.data == "start_test")
async def start_test(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_scores[user_id] = {color: 0 for color in list(color_dict.values())[0]}
    user_progress[user_id] = 0
    await update_user_data()

    await callback_query.message.edit_text("–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç! –û—Å—å –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")
    await send_next_question(user_id, callback_query.message)

async def send_next_question(user_id, message):
    question_id = user_progress[user_id]
    if question_id < len(color_dict):
        question_text = list(color_dict.keys())[question_id]
        await message.edit_text(f"–ü–∏—Ç–∞–Ω–Ω—è {question_id + 1}: {question_text}", reply_markup=get_answer_buttons(question_id))
    else:
        await check_subscription(user_id, message)

@router.callback_query(lambda c: c.data.startswith(('yes_', 'no_', 'skip_')))
async def handle_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    answer_type, question_id = callback_query.data.split('_')
    question_id = int(question_id)

    if answer_type == "yes":
        for color, value in color_dict[list(color_dict.keys())[question_id]].items():
            user_scores[user_id][color] += value

    user_progress[user_id] += 1
    await update_user_data()
    
    await send_next_question(user_id, callback_query.message)

async def check_subscription(user_id, message):
    if await is_user_subscribed(user_id):
        await send_results(user_id, message)
    else:
        await message.edit_text("‚ùå –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=get_subscribe_button())

@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    is_subscribed = await is_user_subscribed(user_id)

    if is_subscribed:
        await callback_query.message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –û—Å—å –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        await send_results(user_id, callback_query.message)
    else:
        await callback_query.message.edit_text(
            "‚ùå –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:", 
            reply_markup=get_subscribe_button()
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    if callback_query.message.text != new_text:
        await callback_query.message.edit_text(new_text, reply_markup=new_markup)
    else:
        await callback_query.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–µ!", show_alert=True)

async def send_results(user_id, message):
    scores = user_scores.get(user_id, {})
    
    if not scores:
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è {user_id} –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ user_scores.")
        return

    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)

    result_text = "‚¨áÔ∏è *–í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:*\n"
    for color, score in sorted_scores:
        evaluation = evaluate_color_score(color, score)
        system_name = color_to_system.get(color, "–ù–µ–≤—ñ–¥–æ–º–∞ —Å–∏—Å—Ç–µ–º–∞")
        icon = evaluation_icons.get(evaluation, "‚ö™")
        result_text += f"{icon} *{system_name}:* {evaluation}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        await message.answer(result_text.strip(), parse_mode="Markdown")
        logging.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è {user_id}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {e}")

def evaluate_color_score(color, score):
    for threshold, evaluation in evaluation_criteria[color]:
        if score <= threshold:
            return evaluation

async def main():
    await init_user_data()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
