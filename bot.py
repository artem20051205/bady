import logging
import asyncio
import json
import os
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ChatMemberStatus
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram import F

from color_data import color_dict

API_TOKEN = "7244256073:AAHO41bWchf_6ZvJHWGN_6A_JydJFc826l4"
CHANNEL_ID = "@tteessttooss"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ
DATA_FILE = 'user_data.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_user_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_user_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
user_scores = load_user_data().get('scores', defaultdict(lambda: {color: 0 for color in next(iter(color_dict.values()))}))
user_progress = load_user_data().get('progress', defaultdict(int))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
def get_answer_buttons(question_id):
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"yes_{question_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"no_{question_id}")],
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{question_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscribe_button():
    return InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def send_welcome(message: types.Message):
    if message.from_user.id not in user_scores:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–∏–º –µ–≥–æ
        user_scores[message.from_user.id] = {color: 0 for color in next(iter(color_dict.values()))}
        user_progress[message.from_user.id] = 0
    update_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç. –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
    await send_next_question(message.from_user.id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def send_next_question(user_id):
    question_id = user_progress[user_id]
    if question_id < len(color_dict):
        question_text = list(color_dict.keys())[question_id]
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–æ–ø—Ä–æ—Å {question_id + 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await bot.send_message(user_id, f"–í–æ–ø—Ä–æ—Å {question_id + 1}: {question_text}", reply_markup=get_answer_buttons(question_id))
    else:
        await check_subscription(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
@router.callback_query(F.data.startswith(('yes_', 'no_', 'skip_')))
async def handle_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    answer_type, question_id = callback_query.data.split('_')
    question_id = int(question_id)

    if answer_type == "yes":
        for color, value in color_dict[list(color_dict.keys())[question_id]].items():
            user_scores[user_id][color] += value

    user_progress[user_id] += 1
    update_user_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await callback_query.message.delete()
    await send_next_question(user_id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def check_subscription(user_id):
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
            await send_results(user_id)
        else:
            await bot.send_message(user_id, f"‚ùå –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_ID}", reply_markup=get_subscribe_button())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await bot.send_message(user_id, f"‚ö† –û—à–∏–±–∫–∞: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.delete()
    await check_subscription(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ü–≤–µ—Ç—É "yellow"
def evaluate_yellow_score(score):
    if score <= 2:
        return "Digestive system: –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ"
    elif score <= 4:
        return "Digestive system: —Ö–æ—Ä–æ—à–æ"
    elif score <= 9:
        return "Digestive system: —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        return "Digestive system: –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def send_results(user_id):
    scores = user_scores[user_id]
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)

    result_text = "üé® *–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
    for color, score in sorted_scores:
        result_text += f"{color.capitalize()}: {score} –±–∞–ª–ª–æ–≤\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ü–≤–µ—Ç–∞ "yellow"
    yellow_score = scores.get("yellow", 0)
    result_text += f"\n{evaluate_yellow_score(yellow_score)}"

    await bot.send_message(user_id, result_text, parse_mode="Markdown")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
def update_user_data():
    data = {
        'scores': user_scores,
        'progress': user_progress
    }
    save_user_data(data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (Aiogram 3.x)
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
