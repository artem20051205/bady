import asyncio
import json
import logging
import os
from collections import defaultdict
from typing import Dict, Any, Optional
# <<< –î–û–î–ê–ù–û: timedelta –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
from datetime import datetime, time, timedelta

import aiofiles
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import config
from color_data import (
    color_dict, evaluation_criteria, color_to_system, evaluation_icons, MENUS
)
from test_handlers import router as test_router

API_TOKEN: str = config.API_TOKEN
CHANNEL_ID: int = config.CHANNEL_ID
MENU_TIME = time(12, 00) # –ß–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω—é
WEIGHT_TIME = time(18, 00) # –ß–∞—Å –∑–∞–ø–∏—Ç—É –≤–∞–≥–∏
# <<< –î–û–î–ê–ù–û: –ß–∞—Å –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏ –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É)
REMINDER_OFFSET_HOURS = 2
# –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
# –û–±–µ—Ä–µ–∂–Ω–æ –∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–º —á–µ—Ä–µ–∑ –ø—ñ–≤–Ω—ñ—á, –∞–ª–µ –¥–ª—è –≤–µ—á—ñ—Ä–Ω—ñ—Ö —á–∞—Å—ñ–≤ —Ü–µ –ø—Ä–∞—Ü—é—î:
REMINDER_TIME = time((WEIGHT_TIME.hour + REMINDER_OFFSET_HOURS) % 24, WEIGHT_TIME.minute)

TOTAL_WEIGHT_TRACKING_DAYS = 7

USER_DATA_DIR = "user_data"

# Ensure the directory for user data exists
os.makedirs(USER_DATA_DIR, exist_ok=True)

WEIGHT_TRACKING_INSTRUCTIONS = (
    "üìã –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–ø—É—â–µ–Ω–æ!\n\n"
    f"–Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –≤–∞–º –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —â–æ—Ä–∞–Ω–∫—É –æ {MENU_TIME.strftime('%H:%M')} "
    f"—Ç–∞ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏–º—É –≤–∞—à—É –≤–∞–≥—É —â–æ–≤–µ—á–æ—Ä–∞ –æ {WEIGHT_TIME.strftime('%H:%M')} "
    f"–ø—Ä–æ—Ç—è–≥–æ–º {TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤."
)
WEIGHT_QUESTION = "‚öñÔ∏è –Ø–∫–∞ —É –≤–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∞–≥–∞? –ù–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 75.5 –∞–±–æ 75,5)."
WEIGHT_REMINDER = "‚è∞ –ù–∞–≥–∞–¥—É—é, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –≤–∞–≥—É."

WELCOME_IMAGE_PATH = "img/1.png"
RESULTS_IMAGE_PATH = "img/1.png" # –ú–æ–∂–ª–∏–≤–æ, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –∑–∞–ª–∏—à–º–æ

SUPPORT_USERNAME = "@MRartemkaa"  # Replace with the actual username for support

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()
router: Router = Router()

# <<< –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ defaultdict(lambda: None) —â–æ–± –ª–µ–≥—à–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
user_weight_data: Dict[int, Optional[Dict[str, Any]]] = defaultdict(lambda: None)
# user_last_question_msg_id –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ–¥—ñ, –º–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ
# user_last_question_msg_id: Dict[int, int] = defaultdict(int)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- –§—É–Ω–∫—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
def save_user_to_json(user_id: int, data: dict):
    """Save user data to a JSON file."""
    user_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
    try:
        with open(user_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logging.info(f"–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª {user_file}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —É —Ñ–∞–π–ª {user_file}: {e}")

def load_user_from_json(user_id: int) -> Optional[dict]:
    """Load user data from a JSON file."""
    user_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
    if os.path.exists(user_file):
        try:
            with open(user_file, "r", encoding="utf-8") as f:
                data = json.load(f)
            logging.info(f"–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É {user_file}")
            return data
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ —Ñ–∞–π–ª—É {user_file}: {e}")
    return None # <<< –ó–ú–Ü–ù–ê: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None, —è–∫—â–æ —Ñ–∞–π–ª—É –Ω–µ–º–∞—î –∞–±–æ –ø–æ–º–∏–ª–∫–∞

def load_all_users():
    """Load all user data from JSON files into memory."""
    logging.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—ñ–≤.")
    if not os.path.exists(USER_DATA_DIR):
        logging.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {USER_DATA_DIR} –Ω–µ —ñ—Å–Ω—É—î.")
        return

    for filename in os.listdir(USER_DATA_DIR):
        if filename.endswith(".json"):
            try:
                user_id = int(filename.split(".")[0])
                user_data = load_user_from_json(user_id)
                if user_data: # <<< –ó–ú–Ü–ù–ê: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
                    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è —ñ—Å–Ω—É—é—Ç—å
                    user_data.setdefault("weights", {})
                    user_data.setdefault("day", 1)
                    user_data.setdefault("finished", False)
                    user_data.setdefault("asked_today", False)
                    user_data.setdefault("menu_sent_today", False)
                    user_data.setdefault("last_entry_date", None) # <<< –î–û–î–ê–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É –≤–∞–≥–∏
                    user_weight_data[user_id] = user_data
                    logging.info(f"–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
            except ValueError:
                logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É: {filename}")
            except Exception as e:
                 logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É {filename}: {e}")

# <<< –ó–ú–Ü–ù–ê: –§—É–Ω–∫—Ü—ñ—ó save/load_user_data —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞–ø—Ä—è–º—É –∑ user_weight_data —Ç–∞ —Ñ–∞–π–ª–æ–º
async def save_user_data_to_file(user_id: int) -> None:
    """Save current in-memory user data to their JSON file."""
    if user_weight_data[user_id] is not None:
        save_user_to_json(user_id, user_weight_data[user_id])
    else:
        logging.warning(f"–°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

# load_user_data –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞, –±–æ –º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ –≤ user_weight_data

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
async def send_safe_message(user_id: int, text: str, **kwargs):
    try:
        await bot.send_message(user_id, text, **kwargs)
        return True # <<< –î–û–î–ê–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö
    except TelegramAPIError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
        # <<< –î–û–î–ê–ù–û: –û–±—Ä–æ–±–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        if "bot was blocked by the user" in str(e) or "user is deactivated" in str(e):
            logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π. –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.")
            if user_id in user_weight_data:
                del user_weight_data[user_id]
            user_file = os.path.join(USER_DATA_DIR, f"{user_id}.json")
            if os.path.exists(user_file):
                try:
                    os.remove(user_file)
                    logging.info(f"–§–∞–π–ª –¥–∞–Ω–∏—Ö –¥–ª—è {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
                except OSError as rm_err:
                    logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –¥–∞–Ω–∏—Ö –¥–ª—è {user_id}: {rm_err}")
        return False # <<< –î–û–î–ê–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ—É—Å–ø—ñ—Ö

async def is_user_subscribed(user_id: int) -> bool:
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
    except TelegramAPIError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤ –∫–∞–Ω–∞–ª—ñ {CHANNEL_ID}: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        return False

# --- –§—É–Ω–∫—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫ —Ç–∞ –º–µ–Ω—é ---
# –ó–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω: create_buttons, get_subscribe_button, get_main_menu

def create_buttons(buttons: list[tuple[str, str]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=text, callback_data=callback)] for text, callback in buttons]
    )

def get_subscribe_button() -> InlineKeyboardMarkup:
    channel_link = getattr(config, 'CHANNEL_LINK', "https://t.me/tteessttooss") # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, –ø–æ—Å–∏–ª–∞–Ω–Ω—è —î –≤ config
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", url=channel_link)],
            [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )

def get_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞", callback_data="start_weight"), # –ó–º—ñ–Ω–µ–Ω–æ —Ç–µ–∫—Å—Ç –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ
                InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")
            ],
            [
                InlineKeyboardButton(text="üéß –ó–≤'—è–∑–æ–∫ –∑ –Ω–∞–º–∏", callback_data="call_center")
            ]
        ]
    )

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∫–æ–ª–±–µ–∫—ñ–≤ ---

@router.callback_query(F.data == "call_center")
async def handle_call_center_callback(callback: types.CallbackQuery) -> None:
    """Handle the 'Contact Us' button."""
    await callback.message.answer(f"–î–ª—è –∑–≤'—è–∑–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–∞–ø–∏—à—ñ—Ç—å: {SUPPORT_USERNAME}")
    await callback.answer()

@router.message(CommandStart())
async def send_welcome(message: types.Message) -> None:
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({message.from_user.full_name}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.")
    caption = f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    try:
        photo = FSInputFile(WELCOME_IMAGE_PATH)
        await message.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=get_main_menu()
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ ({WELCOME_IMAGE_PATH}): {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        await message.answer(
            caption,
            reply_markup=get_main_menu()
        )

@router.message(Command("mainmenu"))
async def handle_mainmenu_command(message: types.Message) -> None:
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /mainmenu.")
    text = "üëã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    markup = get_main_menu()
    try:
        photo = FSInputFile(WELCOME_IMAGE_PATH)
        await message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ç–æ ({WELCOME_IMAGE_PATH}): {e}. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É.")
        await message.answer(
            text,
            reply_markup=markup
        )

@router.callback_query(F.data == "check_subscription")
async def handle_check_subscription_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    # <<< –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ edit_text –æ–±–µ—Ä–µ–∂–Ω–æ, –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–µ
    try:
        await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–ø–∏—Å–∫—É...")
    except TelegramBadRequest as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        # –ù–∞–¥—ñ—à–ª–µ–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
        await callback.message.answer("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–ø–∏—Å–∫—É...")

    if await is_user_subscribed(user_id):
        # <<< –ó–ú–Ü–ù–ê: –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        await callback.message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –ú–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º.", reply_markup=get_main_menu())
        try: # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–ø–∏—Å–∫—É..."
           await callback.message.delete()
        except TelegramAPIError: pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏
    else:
        await callback.message.answer( # <<< –ó–ú–Ü–ù–ê: –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            "‚ùå –í–∏ –≤—Å–µ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ.", reply_markup=get_subscribe_button())
    await callback.answer()

# async def send_results(user_id: int, chat_id: int) -> None: # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—É—Ç
#     await send_safe_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())

@router.callback_query(F.data == "start_weight")
async def handle_start_weight_callback(callback: types.CallbackQuery) -> None:
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    global user_weight_data

    user_data = user_weight_data.get(user_id) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get() –¥–ª—è –±–µ–∑–ø–µ–∫–∏

    if user_data:
        if user_data.get("finished"):
            await callback.answer("‚úÖ –í–∏ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞'.", show_alert=True)
            await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥—ñ—é:", reply_markup=get_main_menu()) # <<< –î–û–î–ê–ù–û: –ü–æ–∫–∞–∂–µ–º–æ –º–µ–Ω—é –∑–Ω–æ–≤—É
            return
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º–æ –º–µ–Ω—é/–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            current_day = user_data.get("day", 1)
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (–∞–∫—Ç–∏–≤–Ω–∏–π —É—á–∞—Å–Ω–∏–∫, –¥–µ–Ω—å {current_day}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞'.")
            # –ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—é —â–µ —Ä–∞–∑, —è–∫—â–æ –≤—ñ–Ω –ø—Ä–æ—Å–∏—Ç—å
            await send_menu(user_id, current_day)
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —Ç—Ä–µ–±–∞ –∑–∞–ø–∏—Ç–∞—Ç–∏ –≤–∞–≥—É (—è–∫—â–æ —â–µ –Ω–µ –ø–∏—Ç–∞–ª–∏/–Ω–µ –≤–≤–æ–¥–∏–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ)
            today_str = datetime.now().strftime("%Y-%m-%d")
            if today_str not in user_data.get("weights", {}):
                 await ask_weight(user_id)
            else:
                 await send_safe_message(user_id, f"–í–∞—à—É –≤–∞–≥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today_str}) –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ.")

            await callback.answer(f"–í–∏ –Ω–∞ –î–Ω—ñ {current_day}. –ú–µ–Ω—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
            return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π –∞–±–æ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' ({TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤).")
    user_weight_data[user_id] = {
        "weights": {},
        "day": 1,
        "finished": False,
        "asked_today": False,
        "menu_sent_today": False,
        "last_entry_date": None # <<< –î–û–î–ê–ù–û
    }
    await save_user_data_to_file(user_id) # <<< –ó–ú–Ü–ù–ê: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó (–∫—Ä–∞—â–µ –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, –Ω—ñ–∂ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏)
    await send_safe_message(user_id, WEIGHT_TRACKING_INSTRUCTIONS)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–µ—Ä—à–µ –º–µ–Ω—é —Ç–∞ –∑–∞–ø–∏—Ç—É—î–º–æ –≤–∞–≥—É
    await send_menu(user_id, 1)
    user_weight_data[user_id]['menu_sent_today'] = True # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –º–µ–Ω—é –∑–∞ 1-–π –¥–µ–Ω—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
    await ask_weight(user_id)
    user_weight_data[user_id]['asked_today'] = True # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –≤–∞–≥—É –∑–∞–ø–∏—Ç–∞–ª–∏
    await save_user_data_to_file(user_id) # <<< –ó–ú–Ü–ù–ê: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ

    await callback.answer()


async def send_menu(user_id: int, day: int) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –º–µ–Ω—é –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å."""
    menu_text = MENUS.get(day)
    if menu_text:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω—é –î–Ω—è {day}/{TOTAL_WEIGHT_TRACKING_DAYS} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        full_text = f"üìÖ *–ú–µ–Ω—é –Ω–∞ –î–µ–Ω—å {day}*\n\n{menu_text}"
        markup = None
        if day == 3: # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç—É –Ω–∞ 3-–π –¥–µ–Ω—å
             markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")]])

        await send_safe_message(user_id, full_text, reply_markup=markup, parse_mode="Markdown")
    else:
        logging.warning(f"–ú–µ–Ω—é –¥–ª—è –¥–Ω—è {day} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ color_data.MENUS!")
        await send_safe_message(user_id, f"‚ö†Ô∏è –ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –º–µ–Ω—é –¥–ª—è –¥–Ω—è {day}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ({SUPPORT_USERNAME}).")

async def ask_weight(user_id: int) -> None:
    """–ó–∞–ø–∏—Ç—É—î –≤–∞–≥—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    logging.info(f"–ó–∞–ø–∏—Ç –≤–∞–≥–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    await send_safe_message(user_id, WEIGHT_QUESTION)


@router.message(F.text.regexp(r'^\d+([.,]\d+)?$'))
async def handle_weight_input(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    global user_weight_data

    user_data = user_weight_data.get(user_id)

    # –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É –ø—Ä–æ–≥—Ä–∞–º—ñ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–∏–≤
    if not user_data or user_data.get("finished"):
        # –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, —â–æ –ø—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏
        # await message.reply("–ù–∞—Ä–∞–∑—ñ –ø—Ä–æ–≥—Ä–∞–º–∞ '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –¥–ª—è –≤–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        logging.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤–∞–≥—É –≤—ñ–¥ {user_id}, –∞–ª–µ –ø—Ä–æ–≥—Ä–∞–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    try:
        weight_str = message.text.replace(',', '.')
        weight = float(weight_str)
        if not (20 < weight < 300): # –ü—Ä–æ—Å—Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∞–≥–∏
            raise ValueError("–ù–µ—Ä–µ–∞–ª—å–Ω–∞ –≤–∞–≥–∞")
    except ValueError:
        await message.reply("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 75.5 –∞–±–æ 75,5).")
        return

    # <<< –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ user_data
    current_day = user_data.get("day", 1)
    today_str = datetime.now().strftime("%Y-%m-%d") # –î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è

    # <<< –ó–ú–Ü–ù–ê: –ó–∞–ø–∏—Å—É—î–º–æ –≤–∞–≥—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è *–ø—Ä–æ–≥—Ä–∞–º–∏*, –∞ –Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –¥–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –¥–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É,
    # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –≤–∞–≥—É –∑–∞ –≤—á–æ—Ä–∞—à–Ω—ñ–π –¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–∏ —Å—å–æ–≥–æ–¥–Ω—ñ.
    # –ö—Ä–∞—â–µ –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤–∞–≥—É –∑–∞ *–∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ—é* –¥–∞—Ç–æ—é, –∫–æ–ª–∏ –≤–æ–Ω–∞ –±—É–ª–∞ –≤–≤–µ–¥–µ–Ω–∞.
    # –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç—å, –¥–æ —è–∫–æ–≥–æ –¥–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ —Ü–µ –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–Ω—è.

    if today_str in user_data.get("weights", {}):
        await message.reply(f"‚ö†Ô∏è –í–∞–≥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today_str}) –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞: {user_data['weights'][today_str]:.1f} –∫–≥.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞–≥—É
    user_data.setdefault("weights", {})[today_str] = weight
    user_data["last_entry_date"] = today_str # <<< –î–û–î–ê–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É
    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –Ω–∞ *—Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏–π –¥–µ–Ω—å* –≤–∞–≥—É –≤–≤–µ–¥–µ–Ω–æ (–¥–ª—è –ª–æ–≥—ñ–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å)
    # –¶–µ–π –ø—Ä–∞–ø–æ—Ä asked_today —Å–∫–∏–Ω–µ—Ç—å—Å—è –æ–ø—ñ–≤–Ω–æ—á—ñ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–æ–º
    user_data["asked_today"] = True # –ú–æ–∂–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏, —â–æ —è–∫—â–æ –≤–≤—ñ–≤ - —Ç–æ –π –ø–∏—Ç–∞–ª–∏

    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –≤–∞–≥—É {weight:.1f} –∫–≥ –∑–∞ {today_str} (–î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–∏ {current_day}/{TOTAL_WEIGHT_TRACKING_DAYS})")
    await message.reply(f"‚úÖ –í–∞–≥–∞ {weight:.1f} –∫–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ (–î–µ–Ω—å {current_day}/{TOTAL_WEIGHT_TRACKING_DAYS}). –î—è–∫—É—é!")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –ù–ï —Ç—É—Ç, –∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–Ω—è —É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É!
    # –¢—É—Ç –º–∏ –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞–≥—É. –î–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–∏ –∑–±—ñ–ª—å—à–∏—Ç—å—Å—è –æ–ø—ñ–≤–Ω–æ—á—ñ.

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await save_user_data_to_file(user_id) # <<< –ó–ú–Ü–ù–ê


# --- –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ ---
async def scheduler():
    logging.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ.")
    while True:
        now = datetime.now()
        current_time = now.time()
        today_str = now.strftime("%Y-%m-%d")

        # <<< –ó–ú–Ü–ù–ê: –ö–æ–ø—ñ—é—î–º–æ –∫–ª—é—á—ñ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥ —á–∞—Å —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
        active_user_ids = list(user_weight_data.keys())

        for user_id in active_user_ids:
            user_data = user_weight_data.get(user_id)

            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∞–±–æ –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if not user_data or user_data.get("finished"):
                continue

            current_day = user_data.get("day", 1)

            # --- –õ–æ–≥—ñ–∫–∞ –æ–ø—ñ–≤–Ω–æ—á—ñ: –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å ---
            # <<< –ó–ú–Ü–ù–ê: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –ø—ñ—Å–ª—è –ø—ñ–≤–Ω–æ—á—ñ (00:01), —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ race conditions
            if current_time.hour == 0 and current_time.minute == 1:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–≤ –∑–∞–ø–∏—Å –≤–∞–≥–∏ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–∏
                last_day_date = user_data.get("last_entry_date")
                yesterday_str = (now - timedelta(days=1)).strftime("%Y-%m-%d")

                # –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –±—É–≤ –Ω–µ –≤—á–æ—Ä–∞ (–∞–±–æ –π–æ–≥–æ –Ω–µ –±—É–ª–æ), –º–æ–∂–ª–∏–≤–æ, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?
                if last_day_date != yesterday_str and current_day > 1: # –ù–µ –Ω–∞–≥–∞–¥—É—î–º–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –¥–Ω—è
                     logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –≤–≤—ñ–≤ –≤–∞–≥—É –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–∏ (–î–µ–Ω—å {current_day-1}).")
                     # –ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–ø–∞–º–æ–º.
                     # await send_safe_message(user_id, f"‚ö†Ô∏è –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –≤–∞–≥—É –∑–∞ –î–µ–Ω—å {current_day-1}. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–æ–≥—Ä–∞–º—É.")

                # –ó–±—ñ–ª—å—à—É—î–º–æ –¥–µ–Ω—å –ø—Ä–æ–≥—Ä–∞–º–∏
                next_day = current_day + 1
                logging.info(f"–ü—ñ–≤–Ω—ñ—á –¥–ª—è {user_id}. –ü–µ—Ä–µ—Ö—ñ–¥ –∑ –î–Ω—è {current_day} –Ω–∞ –î–µ–Ω—å {next_day}.")
                user_data['day'] = next_day
                user_data['menu_sent_today'] = False # –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä –º–µ–Ω—é
                user_data['asked_today'] = False   # –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä –∑–∞–ø–∏—Ç—É –≤–∞–≥–∏

                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –ø—ñ—Å–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –¥–Ω—è
                if next_day > TOTAL_WEIGHT_TRACKING_DAYS:
                    user_data["finished"] = True
                    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–≤–µ—Ä—à–∏–≤ –ø—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' ({TOTAL_WEIGHT_TRACKING_DAYS} –¥–Ω—ñ–≤).")

                    all_weights_entries = sorted(user_data.get("weights", {}).items()) # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é
                    if len(all_weights_entries) >= 1:
                        first_day_weight = all_weights_entries[0][1] # –í–∞–≥–∞ –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Å—É
                        last_day_weight = all_weights_entries[-1][1] # –í–∞–≥–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É
                        weight_diff = last_day_weight - first_day_weight
                        sign = "+" if weight_diff >= 0 else ""
                        num_days_participated = len(all_weights_entries)

                        # <<< –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        success = await send_safe_message(
                            user_id,
                            f"üéâ –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                            f"üìâ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {num_days_participated} –¥–Ω. (–∑ {TOTAL_WEIGHT_TRACKING_DAYS}): {sign}{weight_diff:.1f} –∫–≥.\n"
                            f"(–ü–µ—Ä—à–∞ –≤–∞–≥–∞: {first_day_weight:.1f} –∫–≥, –û—Å—Ç–∞–Ω–Ω—è: {last_day_weight:.1f} –∫–≥)\n\n"
                            f"–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!"
                        )
                        if success:
                            await send_safe_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=get_main_menu())

                    else:
                         # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –≤–∞–≥–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                         await send_safe_message(user_id, "üéâ –ü—Ä–æ–≥—Ä–∞–º—É '–ú–µ–Ω—é —Ç–∞ –í–∞–≥–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!")

                await save_user_data_to_file(user_id) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ (–Ω–æ–≤–∏–π –¥–µ–Ω—å, —Å—Ç–∞—Ç—É—Å finished)
                # –Ø–∫—â–æ –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –±—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ —Ä–æ–±–∏–º–æ
                if user_data.get("finished"):
                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

            # --- –õ–æ–≥—ñ–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ú–µ–Ω—é ---
            if current_time.hour == MENU_TIME.hour and current_time.minute == MENU_TIME.minute:
                if not user_data.get('menu_sent_today'):
                    logging.info(f"–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω—é –î–Ω—è {current_day} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                    await send_menu(user_id, current_day)
                    user_data['menu_sent_today'] = True
                    await save_user_data_to_file(user_id)

            # --- –õ–æ–≥—ñ–∫–∞ –ó–∞–ø–∏—Ç—É –í–∞–≥–∏ ---
            if current_time.hour == WEIGHT_TIME.hour and current_time.minute == WEIGHT_TIME.minute:
                 # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∞–≥–∞ –∑–∞ –°–¨–û–ì–û–î–ù–Ü–®–ù–Æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É –¥–∞—Ç—É —â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                if today_str not in user_data.get("weights", {}):
                    if not user_data.get('asked_today'): # –ó–∞–ø–∏—Ç—É—î–º–æ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —â–µ –Ω–µ –ø–∏—Ç–∞–ª–∏ –ê–ë–û –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–≤—ñ–≤ —Å–∞–º
                        logging.info(f"–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: –∑–∞–ø–∏—Ç –≤–∞–≥–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                        await ask_weight(user_id)
                        user_data['asked_today'] = True
                        await save_user_data_to_file(user_id)

            # --- –õ–æ–≥—ñ–∫–∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –í–∞–≥—É ---
            # <<< –î–û–î–ê–ù–û: –ë–ª–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            if current_time.hour == REMINDER_TIME.hour and current_time.minute == REMINDER_TIME.minute:
                 # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∞–≥–∞ –∑–∞ –°–¨–û–ì–û–î–ù–Ü–®–ù–Æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É –¥–∞—Ç—É —â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                 if today_str not in user_data.get("weights", {}):
                     # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤–∑–∞–≥–∞–ª—ñ –ü–ò–¢–ê–õ–ò —Å—å–æ–≥–æ–¥–Ω—ñ (—â–æ–± –Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏, —è–∫—â–æ –Ω–µ –ø–∏—Ç–∞–ª–∏)
                     if user_data.get('asked_today'):
                         logging.info(f"–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–∞–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                         await send_safe_message(user_id, WEIGHT_REMINDER)
                         # –ù–µ —Å–∫–∏–¥–∞—î–º–æ asked_today, –±–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏
                         # –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—É—Ç, –±–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è –≤ user_data

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        await asyncio.sleep(60)

# --- –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ --- (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
async def notify_users_on_startup():
    """Notify all active users that the bot has started."""
    logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø—Ä–æ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
    active_user_ids = list(user_weight_data.keys())
    for user_id in active_user_ids:
        user_data = user_weight_data.get(user_id)
        if user_data and not user_data.get("finished"): # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö
            try:
                await send_safe_message(user_id, "ü§ñ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º.")
                logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}.")
            except Exception as e:
                logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
async def main() -> None:
    # Load all user data into memory
    load_all_users() # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ *–ø–µ—Ä–µ–¥* —É—Å—ñ–º —ñ–Ω—à–∏–º

    dp.include_router(router)
    dp.include_router(test_router)  # Include the test router
    scheduler_task = asyncio.create_task(scheduler()) # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —É —Ñ–æ–Ω—ñ
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (polling)...")

    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ –∑–∞–ø—É—Å–∫ (–ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)
    await notify_users_on_startup()

    try:
        await dp.start_polling(bot)
    finally:
        logging.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
        scheduler_task.cancel() # –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        try:
            await scheduler_task
        except asyncio.CancelledError:
            logging.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")
        # <<< –î–û–î–ê–ù–û: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ
        logging.info("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º...")
        for user_id in user_weight_data:
             await save_user_data_to_file(user_id)
        logging.info("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        await bot.session.close() # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—é –±–æ—Ç–∞
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É (Ctrl+C)")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}", exc_info=True)