import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from datetime import datetime, time, timedelta
from config import API_TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

COMBINED_DATA_FILE = "data.json"

MENU_TEXT = "üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:\n1. –ó–∞–≤—Ç—Ä–∞–∫: –û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏\n2. –û–±–µ–¥: –ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º\n3. –£–∂–∏–Ω: –°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º"
WEIGHT_QUESTION = "‚öñÔ∏è –ö–∞–∫–æ–π —É –≤–∞—Å –±—ã–ª –≤–µ—Å —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º? –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –≤ –∫–≥."

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data():
    try:
        with open(COMBINED_DATA_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data):
    try:
        with open(COMBINED_DATA_FILE, "w") as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    data = load_data()
    user_id = str(message.chat.id)

    if user_id not in data:
        data[user_id] = {"name": f"User {user_id}", "weights": {}}
        save_data(data)
        await message.answer("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–µ—á–µ—Ä–Ω–∏–π –∑–∞–ø—Ä–æ—Å –≤–µ—Å–∞.")
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

@dp.message(F.text == "/weight")
async def weight_history_handler(message: Message):
    user_id = str(message.chat.id)
    data = load_data()

    if user_id in data and data[user_id]["weights"]:
        history = "\n".join([f"{date}: {weight} –∫–≥" for date, weight in data[user_id]["weights"].items()])
        await message.answer(f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ç–≤–æ–µ–≥–æ –≤–µ—Å–∞:\n{history}")
    else:
        await message.answer("‚ùå –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞ –ø—É—Å—Ç–∞!")

async def send_menu():
    data = load_data()
    for user_id in data:
        try:
            await bot.send_message(user_id, MENU_TEXT)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def ask_weight():
    data = load_data()
    for user_id in data:
        try:
            await bot.send_message(user_id, WEIGHT_QUESTION)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@dp.message(F.text.regexp(r"^\d+(\.\d+)?$"))
async def weight_handler(message: Message):
    user_id = str(message.chat.id)
    weight = message.text
    today = datetime.now().strftime("%Y-%m-%d")

    data = load_data()
    if user_id not in data:
        data[user_id] = {"name": f"User {user_id}", "weights": {}}
    
    data[user_id]["weights"][today] = weight
    save_data(data)

    await message.answer(f"‚úÖ –í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ {today}!")

async def scheduler():
    while True:
        now = datetime.now()
        next_run = None
        
        if now.time() < time(8, 0):
            next_run = now.replace(hour=8, minute=0, second=0, microsecond=0)
        elif now.time() < time(20, 0):
            next_run = now.replace(hour=20, minute=0, second=0, microsecond=0)
        else:
            next_run = (now + timedelta(days=1)).replace(hour=8, minute=0, second=0, microsecond=0)

        delay = (next_run - now).total_seconds()
        logging.info(f"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {next_run} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(delay)

        if next_run.hour == 8:
            await send_menu()
        elif next_run.hour == 20:
            await ask_weight()

async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
