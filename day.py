import asyncio
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.exceptions import TelegramAPIError
from datetime import datetime, time
from config import API_TOKEN
from color_data import MENUS

dp = Dispatcher()
bot = Bot(token=API_TOKEN)

COMBINED_DATA_FILE = "data.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
MENU_TIME = time(8, 49)  # 08:31
WEIGHT_TIME = time(8, 52)  # 08:38

INSTRUCTIONS = "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–Ω—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —É—Ç—Ä–æ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–µ—Å –≤–µ—á–µ—Ä–æ–º."
WEIGHT_QUESTION = "‚öñÔ∏è –ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å? –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–≥."

# –ò—Å–ø–æ–ª—å–∑—É–µ–º lock –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å JSON —Ñ–∞–π–ª–æ–º
json_lock = asyncio.Lock()

async def load_data():
    async with json_lock:
        try:
            with open(COMBINED_DATA_FILE, "r") as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            return {}

async def save_data(data):
    async with json_lock:
        try:
            with open(COMBINED_DATA_FILE, "w") as f:
                json.dump(data, f, indent=4)
        except Exception as e:
            pass

async def send_message(user_id, text):
    try:
        await bot.send_message(user_id, text)
    except TelegramAPIError as e:
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start_handler(message: Message):
    user_id = str(message.chat.id)
    data = await load_data()

    if user_id not in data:
        data[user_id] = {"name": f"User {user_id}", "weights": {}, "day": 1, "finished": False}
        await save_data(data)
        await send_message(user_id, INSTRUCTIONS)
    elif data[user_id].get("finished"):
        await send_message(user_id, "‚úÖ –¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª —É—á–∞—Å—Ç–∏–µ!")
        return

    await ask_weight(user_id)
    await send_menu(user_id, 1)

async def send_menu(user_id, day):
    if day in MENUS:
        await send_message(user_id, MENUS[day])

async def ask_weight(user_id):
    await send_message(user_id, WEIGHT_QUESTION)

async def weight_handler(message: Message):
    user_id = str(message.chat.id)
    weight = message.text
    today = datetime.now().strftime("%Y-%m-%d")

    data = await load_data()
    if user_id not in data or data[user_id].get("finished"):
        return

    if today in data[user_id]["weights"]:
        await send_message(user_id, "‚ö†Ô∏è –í–µ—Å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω —Å–µ–≥–æ–¥–Ω—è!")
        return

    data[user_id]["weights"][today] = weight
    await save_data(data)
    await send_message(user_id, f"‚úÖ –í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ {today}!")

    if data[user_id]["day"] < 3:
        data[user_id]["day"] += 1
        await save_data(data)
    else:
        first_day_weight = float(list(data[user_id]["weights"].values())[0])
        last_day_weight = float(weight)
        weight_diff = last_day_weight - first_day_weight
        await send_message(user_id, f"üìâ –†–∞–∑–Ω–∏—Ü–∞ –≤ –≤–µ—Å–µ —Å –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º: {weight_diff:.1f} –∫–≥. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        data[user_id]["finished"] = True
        await save_data(data)

async def scheduler():
    while True:
        now = datetime.now().time()
        data = await load_data()
        for user_id in list(data.keys()):
            if data[user_id].get("finished"):
                continue
            user_day = data[user_id].get("day", 1)
            last_weight_date = max(data[user_id]["weights"].keys(), default="")
            today = datetime.now().strftime("%Y-%m-%d")
            if last_weight_date != today and user_day > 1:
                await send_message(user_id, "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–µ—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!")
                continue
            if now.hour == MENU_TIME.hour and now.minute == MENU_TIME.minute and user_day <= 3:
                await send_menu(user_id, user_day)
            if now.hour == WEIGHT_TIME.hour and now.minute == WEIGHT_TIME.minute:
                await ask_weight(user_id)
        await asyncio.sleep(30)

async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
